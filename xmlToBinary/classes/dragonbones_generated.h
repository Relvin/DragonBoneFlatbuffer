// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_DRAGONBONES_DRAGONBONES_H_
#define FLATBUFFERS_GENERATED_DRAGONBONES_DRAGONBONES_H_

#include "flatbuffers/flatbuffers.h"


namespace dragonBones {

struct PointOption;
struct TransformOption;
struct CurveDataOption;
struct FrameOption;
struct TransformFrameOption;
struct ColorTransformOption;
struct SlotFrameOption;
struct TimelineOption;
struct TransformTimelineOption;
struct DisplayDataOption;
struct SlotTimelineOption;
struct BoneDataOption;
struct SlotDataOption;
struct SkinDataOption;
struct AnimationDataOption;
struct ArmatureOption;
struct DragonBonesParseBinary;

MANUALLY_ALIGNED_STRUCT(4) PointOption {
 private:
  float x_;
  float y_;

 public:
  PointOption(float x, float y)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
};
STRUCT_END(PointOption, 8);

MANUALLY_ALIGNED_STRUCT(4) TransformOption {
 private:
  float x_;
  float y_;
  float skewX_;
  float skewY_;
  float scaleX_;
  float scaleY_;

 public:
  TransformOption(float x, float y, float skewX, float skewY, float scaleX, float scaleY)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)), skewX_(flatbuffers::EndianScalar(skewX)), skewY_(flatbuffers::EndianScalar(skewY)), scaleX_(flatbuffers::EndianScalar(scaleX)), scaleY_(flatbuffers::EndianScalar(scaleY)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
  float skewX() const { return flatbuffers::EndianScalar(skewX_); }
  float skewY() const { return flatbuffers::EndianScalar(skewY_); }
  float scaleX() const { return flatbuffers::EndianScalar(scaleX_); }
  float scaleY() const { return flatbuffers::EndianScalar(scaleY_); }
};
STRUCT_END(TransformOption, 24);

struct CurveDataOption : private flatbuffers::Table {
  uint8_t dataChanged() const { return GetField<uint8_t>(4, 0); }
  const flatbuffers::Vector<const PointOption *> *pointList() const { return GetPointer<const flatbuffers::Vector<const PointOption *> *>(6); }
  const flatbuffers::Vector<const PointOption *> *sampling() const { return GetPointer<const flatbuffers::Vector<const PointOption *> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* dataChanged */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* pointList */) &&
           verifier.Verify(pointList()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* sampling */) &&
           verifier.Verify(sampling()) &&
           verifier.EndTable();
  }
};

struct CurveDataOptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dataChanged(uint8_t dataChanged) { fbb_.AddElement<uint8_t>(4, dataChanged, 0); }
  void add_pointList(flatbuffers::Offset<flatbuffers::Vector<const PointOption *>> pointList) { fbb_.AddOffset(6, pointList); }
  void add_sampling(flatbuffers::Offset<flatbuffers::Vector<const PointOption *>> sampling) { fbb_.AddOffset(8, sampling); }
  CurveDataOptionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CurveDataOptionBuilder &operator=(const CurveDataOptionBuilder &);
  flatbuffers::Offset<CurveDataOption> Finish() {
    auto o = flatbuffers::Offset<CurveDataOption>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<CurveDataOption> CreateCurveDataOption(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t dataChanged = 0,
   flatbuffers::Offset<flatbuffers::Vector<const PointOption *>> pointList = 0,
   flatbuffers::Offset<flatbuffers::Vector<const PointOption *>> sampling = 0) {
  CurveDataOptionBuilder builder_(_fbb);
  builder_.add_sampling(sampling);
  builder_.add_pointList(pointList);
  builder_.add_dataChanged(dataChanged);
  return builder_.Finish();
}

struct FrameOption : private flatbuffers::Table {
  int32_t position() const { return GetField<int32_t>(4, 0); }
  int32_t duration() const { return GetField<int32_t>(6, 0); }
  uint8_t frameType() const { return GetField<uint8_t>(8, 0); }
  const flatbuffers::String *action() const { return GetPointer<const flatbuffers::String *>(10); }
  const flatbuffers::String *event() const { return GetPointer<const flatbuffers::String *>(12); }
  const flatbuffers::String *sound() const { return GetPointer<const flatbuffers::String *>(14); }
  const CurveDataOption *curve() const { return GetPointer<const CurveDataOption *>(16); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* position */) &&
           VerifyField<int32_t>(verifier, 6 /* duration */) &&
           VerifyField<uint8_t>(verifier, 8 /* frameType */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* action */) &&
           verifier.Verify(action()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* event */) &&
           verifier.Verify(event()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* sound */) &&
           verifier.Verify(sound()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* curve */) &&
           verifier.VerifyTable(curve()) &&
           verifier.EndTable();
  }
};

struct FrameOptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(int32_t position) { fbb_.AddElement<int32_t>(4, position, 0); }
  void add_duration(int32_t duration) { fbb_.AddElement<int32_t>(6, duration, 0); }
  void add_frameType(uint8_t frameType) { fbb_.AddElement<uint8_t>(8, frameType, 0); }
  void add_action(flatbuffers::Offset<flatbuffers::String> action) { fbb_.AddOffset(10, action); }
  void add_event(flatbuffers::Offset<flatbuffers::String> event) { fbb_.AddOffset(12, event); }
  void add_sound(flatbuffers::Offset<flatbuffers::String> sound) { fbb_.AddOffset(14, sound); }
  void add_curve(flatbuffers::Offset<CurveDataOption> curve) { fbb_.AddOffset(16, curve); }
  FrameOptionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FrameOptionBuilder &operator=(const FrameOptionBuilder &);
  flatbuffers::Offset<FrameOption> Finish() {
    auto o = flatbuffers::Offset<FrameOption>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<FrameOption> CreateFrameOption(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t position = 0,
   int32_t duration = 0,
   uint8_t frameType = 0,
   flatbuffers::Offset<flatbuffers::String> action = 0,
   flatbuffers::Offset<flatbuffers::String> event = 0,
   flatbuffers::Offset<flatbuffers::String> sound = 0,
   flatbuffers::Offset<CurveDataOption> curve = 0) {
  FrameOptionBuilder builder_(_fbb);
  builder_.add_curve(curve);
  builder_.add_sound(sound);
  builder_.add_event(event);
  builder_.add_action(action);
  builder_.add_duration(duration);
  builder_.add_position(position);
  builder_.add_frameType(frameType);
  return builder_.Finish();
}

struct TransformFrameOption : private flatbuffers::Table {
  uint8_t visible() const { return GetField<uint8_t>(4, 0); }
  uint8_t tweenScale() const { return GetField<uint8_t>(6, 0); }
  int32_t tweenRotate() const { return GetField<int32_t>(8, 0); }
  float tweenEasing() const { return GetField<float>(10, 0); }
  const TransformOption *global() const { return GetStruct<const TransformOption *>(12); }
  const TransformOption *transform() const { return GetStruct<const TransformOption *>(14); }
  const PointOption *pivot() const { return GetStruct<const PointOption *>(16); }
  const PointOption *scaleOffset() const { return GetStruct<const PointOption *>(18); }
  const FrameOption *frame() const { return GetPointer<const FrameOption *>(20); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* visible */) &&
           VerifyField<uint8_t>(verifier, 6 /* tweenScale */) &&
           VerifyField<int32_t>(verifier, 8 /* tweenRotate */) &&
           VerifyField<float>(verifier, 10 /* tweenEasing */) &&
           VerifyField<TransformOption>(verifier, 12 /* global */) &&
           VerifyField<TransformOption>(verifier, 14 /* transform */) &&
           VerifyField<PointOption>(verifier, 16 /* pivot */) &&
           VerifyField<PointOption>(verifier, 18 /* scaleOffset */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 20 /* frame */) &&
           verifier.VerifyTable(frame()) &&
           verifier.EndTable();
  }
};

struct TransformFrameOptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_visible(uint8_t visible) { fbb_.AddElement<uint8_t>(4, visible, 0); }
  void add_tweenScale(uint8_t tweenScale) { fbb_.AddElement<uint8_t>(6, tweenScale, 0); }
  void add_tweenRotate(int32_t tweenRotate) { fbb_.AddElement<int32_t>(8, tweenRotate, 0); }
  void add_tweenEasing(float tweenEasing) { fbb_.AddElement<float>(10, tweenEasing, 0); }
  void add_global(const TransformOption *global) { fbb_.AddStruct(12, global); }
  void add_transform(const TransformOption *transform) { fbb_.AddStruct(14, transform); }
  void add_pivot(const PointOption *pivot) { fbb_.AddStruct(16, pivot); }
  void add_scaleOffset(const PointOption *scaleOffset) { fbb_.AddStruct(18, scaleOffset); }
  void add_frame(flatbuffers::Offset<FrameOption> frame) { fbb_.AddOffset(20, frame); }
  TransformFrameOptionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TransformFrameOptionBuilder &operator=(const TransformFrameOptionBuilder &);
  flatbuffers::Offset<TransformFrameOption> Finish() {
    auto o = flatbuffers::Offset<TransformFrameOption>(fbb_.EndTable(start_, 9));
    return o;
  }
};

inline flatbuffers::Offset<TransformFrameOption> CreateTransformFrameOption(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t visible = 0,
   uint8_t tweenScale = 0,
   int32_t tweenRotate = 0,
   float tweenEasing = 0,
   const TransformOption *global = 0,
   const TransformOption *transform = 0,
   const PointOption *pivot = 0,
   const PointOption *scaleOffset = 0,
   flatbuffers::Offset<FrameOption> frame = 0) {
  TransformFrameOptionBuilder builder_(_fbb);
  builder_.add_frame(frame);
  builder_.add_scaleOffset(scaleOffset);
  builder_.add_pivot(pivot);
  builder_.add_transform(transform);
  builder_.add_global(global);
  builder_.add_tweenEasing(tweenEasing);
  builder_.add_tweenRotate(tweenRotate);
  builder_.add_tweenScale(tweenScale);
  builder_.add_visible(visible);
  return builder_.Finish();
}

struct ColorTransformOption : private flatbuffers::Table {
  float alphaMultiplier() const { return GetField<float>(4, 0); }
  float redMultiplier() const { return GetField<float>(6, 0); }
  float greenMultiplier() const { return GetField<float>(8, 0); }
  float blueMultiplier() const { return GetField<float>(10, 0); }
  int32_t alphaOffset() const { return GetField<int32_t>(12, 0); }
  int32_t redOffset() const { return GetField<int32_t>(14, 0); }
  int32_t greenOffset() const { return GetField<int32_t>(16, 0); }
  int32_t blueOffset() const { return GetField<int32_t>(18, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, 4 /* alphaMultiplier */) &&
           VerifyField<float>(verifier, 6 /* redMultiplier */) &&
           VerifyField<float>(verifier, 8 /* greenMultiplier */) &&
           VerifyField<float>(verifier, 10 /* blueMultiplier */) &&
           VerifyField<int32_t>(verifier, 12 /* alphaOffset */) &&
           VerifyField<int32_t>(verifier, 14 /* redOffset */) &&
           VerifyField<int32_t>(verifier, 16 /* greenOffset */) &&
           VerifyField<int32_t>(verifier, 18 /* blueOffset */) &&
           verifier.EndTable();
  }
};

struct ColorTransformOptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_alphaMultiplier(float alphaMultiplier) { fbb_.AddElement<float>(4, alphaMultiplier, 0); }
  void add_redMultiplier(float redMultiplier) { fbb_.AddElement<float>(6, redMultiplier, 0); }
  void add_greenMultiplier(float greenMultiplier) { fbb_.AddElement<float>(8, greenMultiplier, 0); }
  void add_blueMultiplier(float blueMultiplier) { fbb_.AddElement<float>(10, blueMultiplier, 0); }
  void add_alphaOffset(int32_t alphaOffset) { fbb_.AddElement<int32_t>(12, alphaOffset, 0); }
  void add_redOffset(int32_t redOffset) { fbb_.AddElement<int32_t>(14, redOffset, 0); }
  void add_greenOffset(int32_t greenOffset) { fbb_.AddElement<int32_t>(16, greenOffset, 0); }
  void add_blueOffset(int32_t blueOffset) { fbb_.AddElement<int32_t>(18, blueOffset, 0); }
  ColorTransformOptionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ColorTransformOptionBuilder &operator=(const ColorTransformOptionBuilder &);
  flatbuffers::Offset<ColorTransformOption> Finish() {
    auto o = flatbuffers::Offset<ColorTransformOption>(fbb_.EndTable(start_, 8));
    return o;
  }
};

inline flatbuffers::Offset<ColorTransformOption> CreateColorTransformOption(flatbuffers::FlatBufferBuilder &_fbb,
   float alphaMultiplier = 0,
   float redMultiplier = 0,
   float greenMultiplier = 0,
   float blueMultiplier = 0,
   int32_t alphaOffset = 0,
   int32_t redOffset = 0,
   int32_t greenOffset = 0,
   int32_t blueOffset = 0) {
  ColorTransformOptionBuilder builder_(_fbb);
  builder_.add_blueOffset(blueOffset);
  builder_.add_greenOffset(greenOffset);
  builder_.add_redOffset(redOffset);
  builder_.add_alphaOffset(alphaOffset);
  builder_.add_blueMultiplier(blueMultiplier);
  builder_.add_greenMultiplier(greenMultiplier);
  builder_.add_redMultiplier(redMultiplier);
  builder_.add_alphaMultiplier(alphaMultiplier);
  return builder_.Finish();
}

struct SlotFrameOption : private flatbuffers::Table {
  uint8_t visible() const { return GetField<uint8_t>(4, 0); }
  float zOrder() const { return GetField<float>(6, 0); }
  int32_t displayIndex() const { return GetField<int32_t>(8, 0); }
  float tweenEasing() const { return GetField<float>(10, 0); }
  const ColorTransformOption *color() const { return GetPointer<const ColorTransformOption *>(12); }
  const FrameOption *frame() const { return GetPointer<const FrameOption *>(14); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* visible */) &&
           VerifyField<float>(verifier, 6 /* zOrder */) &&
           VerifyField<int32_t>(verifier, 8 /* displayIndex */) &&
           VerifyField<float>(verifier, 10 /* tweenEasing */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* color */) &&
           verifier.VerifyTable(color()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* frame */) &&
           verifier.VerifyTable(frame()) &&
           verifier.EndTable();
  }
};

struct SlotFrameOptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_visible(uint8_t visible) { fbb_.AddElement<uint8_t>(4, visible, 0); }
  void add_zOrder(float zOrder) { fbb_.AddElement<float>(6, zOrder, 0); }
  void add_displayIndex(int32_t displayIndex) { fbb_.AddElement<int32_t>(8, displayIndex, 0); }
  void add_tweenEasing(float tweenEasing) { fbb_.AddElement<float>(10, tweenEasing, 0); }
  void add_color(flatbuffers::Offset<ColorTransformOption> color) { fbb_.AddOffset(12, color); }
  void add_frame(flatbuffers::Offset<FrameOption> frame) { fbb_.AddOffset(14, frame); }
  SlotFrameOptionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SlotFrameOptionBuilder &operator=(const SlotFrameOptionBuilder &);
  flatbuffers::Offset<SlotFrameOption> Finish() {
    auto o = flatbuffers::Offset<SlotFrameOption>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<SlotFrameOption> CreateSlotFrameOption(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t visible = 0,
   float zOrder = 0,
   int32_t displayIndex = 0,
   float tweenEasing = 0,
   flatbuffers::Offset<ColorTransformOption> color = 0,
   flatbuffers::Offset<FrameOption> frame = 0) {
  SlotFrameOptionBuilder builder_(_fbb);
  builder_.add_frame(frame);
  builder_.add_color(color);
  builder_.add_tweenEasing(tweenEasing);
  builder_.add_displayIndex(displayIndex);
  builder_.add_zOrder(zOrder);
  builder_.add_visible(visible);
  return builder_.Finish();
}

struct TimelineOption : private flatbuffers::Table {
  int32_t duration() const { return GetField<int32_t>(4, 0); }
  float scale() const { return GetField<float>(6, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<TransformFrameOption>> *transformFrameList() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TransformFrameOption>> *>(8); }
  const flatbuffers::Vector<flatbuffers::Offset<SlotFrameOption>> *slotFrameList() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SlotFrameOption>> *>(10); }
  const flatbuffers::Vector<flatbuffers::Offset<FrameOption>> *frameList() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FrameOption>> *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* duration */) &&
           VerifyField<float>(verifier, 6 /* scale */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* transformFrameList */) &&
           verifier.Verify(transformFrameList()) &&
           verifier.VerifyVectorOfTables(transformFrameList()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* slotFrameList */) &&
           verifier.Verify(slotFrameList()) &&
           verifier.VerifyVectorOfTables(slotFrameList()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* frameList */) &&
           verifier.Verify(frameList()) &&
           verifier.VerifyVectorOfTables(frameList()) &&
           verifier.EndTable();
  }
};

struct TimelineOptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_duration(int32_t duration) { fbb_.AddElement<int32_t>(4, duration, 0); }
  void add_scale(float scale) { fbb_.AddElement<float>(6, scale, 0); }
  void add_transformFrameList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TransformFrameOption>>> transformFrameList) { fbb_.AddOffset(8, transformFrameList); }
  void add_slotFrameList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SlotFrameOption>>> slotFrameList) { fbb_.AddOffset(10, slotFrameList); }
  void add_frameList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FrameOption>>> frameList) { fbb_.AddOffset(12, frameList); }
  TimelineOptionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TimelineOptionBuilder &operator=(const TimelineOptionBuilder &);
  flatbuffers::Offset<TimelineOption> Finish() {
    auto o = flatbuffers::Offset<TimelineOption>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<TimelineOption> CreateTimelineOption(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t duration = 0,
   float scale = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TransformFrameOption>>> transformFrameList = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SlotFrameOption>>> slotFrameList = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FrameOption>>> frameList = 0) {
  TimelineOptionBuilder builder_(_fbb);
  builder_.add_frameList(frameList);
  builder_.add_slotFrameList(slotFrameList);
  builder_.add_transformFrameList(transformFrameList);
  builder_.add_scale(scale);
  builder_.add_duration(duration);
  return builder_.Finish();
}

struct TransformTimelineOption : private flatbuffers::Table {
  uint8_t transformed() const { return GetField<uint8_t>(4, 0); }
  float offset() const { return GetField<float>(6, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(8); }
  const TransformOption *originTransform() const { return GetStruct<const TransformOption *>(10); }
  const PointOption *originPivot() const { return GetStruct<const PointOption *>(12); }
  const TimelineOption *timeline() const { return GetPointer<const TimelineOption *>(14); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* transformed */) &&
           VerifyField<float>(verifier, 6 /* offset */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<TransformOption>(verifier, 10 /* originTransform */) &&
           VerifyField<PointOption>(verifier, 12 /* originPivot */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* timeline */) &&
           verifier.VerifyTable(timeline()) &&
           verifier.EndTable();
  }
};

struct TransformTimelineOptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_transformed(uint8_t transformed) { fbb_.AddElement<uint8_t>(4, transformed, 0); }
  void add_offset(float offset) { fbb_.AddElement<float>(6, offset, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(8, name); }
  void add_originTransform(const TransformOption *originTransform) { fbb_.AddStruct(10, originTransform); }
  void add_originPivot(const PointOption *originPivot) { fbb_.AddStruct(12, originPivot); }
  void add_timeline(flatbuffers::Offset<TimelineOption> timeline) { fbb_.AddOffset(14, timeline); }
  TransformTimelineOptionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TransformTimelineOptionBuilder &operator=(const TransformTimelineOptionBuilder &);
  flatbuffers::Offset<TransformTimelineOption> Finish() {
    auto o = flatbuffers::Offset<TransformTimelineOption>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<TransformTimelineOption> CreateTransformTimelineOption(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t transformed = 0,
   float offset = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   const TransformOption *originTransform = 0,
   const PointOption *originPivot = 0,
   flatbuffers::Offset<TimelineOption> timeline = 0) {
  TransformTimelineOptionBuilder builder_(_fbb);
  builder_.add_timeline(timeline);
  builder_.add_originPivot(originPivot);
  builder_.add_originTransform(originTransform);
  builder_.add_name(name);
  builder_.add_offset(offset);
  builder_.add_transformed(transformed);
  return builder_.Finish();
}

struct DisplayDataOption : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *slotName() const { return GetPointer<const flatbuffers::String *>(6); }
  uint8_t type() const { return GetField<uint8_t>(8, 0); }
  const TransformOption *transform() const { return GetStruct<const TransformOption *>(10); }
  const PointOption *pivot() const { return GetStruct<const PointOption *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* slotName */) &&
           verifier.Verify(slotName()) &&
           VerifyField<uint8_t>(verifier, 8 /* type */) &&
           VerifyField<TransformOption>(verifier, 10 /* transform */) &&
           VerifyField<PointOption>(verifier, 12 /* pivot */) &&
           verifier.EndTable();
  }
};

struct DisplayDataOptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_slotName(flatbuffers::Offset<flatbuffers::String> slotName) { fbb_.AddOffset(6, slotName); }
  void add_type(uint8_t type) { fbb_.AddElement<uint8_t>(8, type, 0); }
  void add_transform(const TransformOption *transform) { fbb_.AddStruct(10, transform); }
  void add_pivot(const PointOption *pivot) { fbb_.AddStruct(12, pivot); }
  DisplayDataOptionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  DisplayDataOptionBuilder &operator=(const DisplayDataOptionBuilder &);
  flatbuffers::Offset<DisplayDataOption> Finish() {
    auto o = flatbuffers::Offset<DisplayDataOption>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<DisplayDataOption> CreateDisplayDataOption(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::String> slotName = 0,
   uint8_t type = 0,
   const TransformOption *transform = 0,
   const PointOption *pivot = 0) {
  DisplayDataOptionBuilder builder_(_fbb);
  builder_.add_pivot(pivot);
  builder_.add_transform(transform);
  builder_.add_slotName(slotName);
  builder_.add_name(name);
  builder_.add_type(type);
  return builder_.Finish();
}

struct SlotTimelineOption : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  uint8_t transformed() const { return GetField<uint8_t>(6, 0); }
  float offset() const { return GetField<float>(8, 0); }
  const TimelineOption *timeline() const { return GetPointer<const TimelineOption *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<uint8_t>(verifier, 6 /* transformed */) &&
           VerifyField<float>(verifier, 8 /* offset */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* timeline */) &&
           verifier.VerifyTable(timeline()) &&
           verifier.EndTable();
  }
};

struct SlotTimelineOptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_transformed(uint8_t transformed) { fbb_.AddElement<uint8_t>(6, transformed, 0); }
  void add_offset(float offset) { fbb_.AddElement<float>(8, offset, 0); }
  void add_timeline(flatbuffers::Offset<TimelineOption> timeline) { fbb_.AddOffset(10, timeline); }
  SlotTimelineOptionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SlotTimelineOptionBuilder &operator=(const SlotTimelineOptionBuilder &);
  flatbuffers::Offset<SlotTimelineOption> Finish() {
    auto o = flatbuffers::Offset<SlotTimelineOption>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<SlotTimelineOption> CreateSlotTimelineOption(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   uint8_t transformed = 0,
   float offset = 0,
   flatbuffers::Offset<TimelineOption> timeline = 0) {
  SlotTimelineOptionBuilder builder_(_fbb);
  builder_.add_timeline(timeline);
  builder_.add_offset(offset);
  builder_.add_name(name);
  builder_.add_transformed(transformed);
  return builder_.Finish();
}

struct BoneDataOption : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *parent() const { return GetPointer<const flatbuffers::String *>(6); }
  int32_t length() const { return GetField<int32_t>(8, 0); }
  uint8_t inheritScale() const { return GetField<uint8_t>(10, 0); }
  uint8_t inheritRotation() const { return GetField<uint8_t>(12, 0); }
  const TransformOption *global() const { return GetStruct<const TransformOption *>(14); }
  const TransformOption *transform() const { return GetStruct<const TransformOption *>(16); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* parent */) &&
           verifier.Verify(parent()) &&
           VerifyField<int32_t>(verifier, 8 /* length */) &&
           VerifyField<uint8_t>(verifier, 10 /* inheritScale */) &&
           VerifyField<uint8_t>(verifier, 12 /* inheritRotation */) &&
           VerifyField<TransformOption>(verifier, 14 /* global */) &&
           VerifyField<TransformOption>(verifier, 16 /* transform */) &&
           verifier.EndTable();
  }
};

struct BoneDataOptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_parent(flatbuffers::Offset<flatbuffers::String> parent) { fbb_.AddOffset(6, parent); }
  void add_length(int32_t length) { fbb_.AddElement<int32_t>(8, length, 0); }
  void add_inheritScale(uint8_t inheritScale) { fbb_.AddElement<uint8_t>(10, inheritScale, 0); }
  void add_inheritRotation(uint8_t inheritRotation) { fbb_.AddElement<uint8_t>(12, inheritRotation, 0); }
  void add_global(const TransformOption *global) { fbb_.AddStruct(14, global); }
  void add_transform(const TransformOption *transform) { fbb_.AddStruct(16, transform); }
  BoneDataOptionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  BoneDataOptionBuilder &operator=(const BoneDataOptionBuilder &);
  flatbuffers::Offset<BoneDataOption> Finish() {
    auto o = flatbuffers::Offset<BoneDataOption>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<BoneDataOption> CreateBoneDataOption(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::String> parent = 0,
   int32_t length = 0,
   uint8_t inheritScale = 0,
   uint8_t inheritRotation = 0,
   const TransformOption *global = 0,
   const TransformOption *transform = 0) {
  BoneDataOptionBuilder builder_(_fbb);
  builder_.add_transform(transform);
  builder_.add_global(global);
  builder_.add_length(length);
  builder_.add_parent(parent);
  builder_.add_name(name);
  builder_.add_inheritRotation(inheritRotation);
  builder_.add_inheritScale(inheritScale);
  return builder_.Finish();
}

struct SlotDataOption : private flatbuffers::Table {
  int32_t displayIndex() const { return GetField<int32_t>(4, 0); }
  int32_t zOrder() const { return GetField<int32_t>(6, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(8); }
  const flatbuffers::String *parent() const { return GetPointer<const flatbuffers::String *>(10); }
  uint8_t blendMode() const { return GetField<uint8_t>(12, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<DisplayDataOption>> *displayDataList() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DisplayDataOption>> *>(14); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* displayIndex */) &&
           VerifyField<int32_t>(verifier, 6 /* zOrder */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* parent */) &&
           verifier.Verify(parent()) &&
           VerifyField<uint8_t>(verifier, 12 /* blendMode */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* displayDataList */) &&
           verifier.Verify(displayDataList()) &&
           verifier.VerifyVectorOfTables(displayDataList()) &&
           verifier.EndTable();
  }
};

struct SlotDataOptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_displayIndex(int32_t displayIndex) { fbb_.AddElement<int32_t>(4, displayIndex, 0); }
  void add_zOrder(int32_t zOrder) { fbb_.AddElement<int32_t>(6, zOrder, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(8, name); }
  void add_parent(flatbuffers::Offset<flatbuffers::String> parent) { fbb_.AddOffset(10, parent); }
  void add_blendMode(uint8_t blendMode) { fbb_.AddElement<uint8_t>(12, blendMode, 0); }
  void add_displayDataList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DisplayDataOption>>> displayDataList) { fbb_.AddOffset(14, displayDataList); }
  SlotDataOptionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SlotDataOptionBuilder &operator=(const SlotDataOptionBuilder &);
  flatbuffers::Offset<SlotDataOption> Finish() {
    auto o = flatbuffers::Offset<SlotDataOption>(fbb_.EndTable(start_, 6));
    return o;
  }
};

inline flatbuffers::Offset<SlotDataOption> CreateSlotDataOption(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t displayIndex = 0,
   int32_t zOrder = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::String> parent = 0,
   uint8_t blendMode = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DisplayDataOption>>> displayDataList = 0) {
  SlotDataOptionBuilder builder_(_fbb);
  builder_.add_displayDataList(displayDataList);
  builder_.add_parent(parent);
  builder_.add_name(name);
  builder_.add_zOrder(zOrder);
  builder_.add_displayIndex(displayIndex);
  builder_.add_blendMode(blendMode);
  return builder_.Finish();
}

struct SkinDataOption : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<SlotDataOption>> *slotDataList() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SlotDataOption>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* slotDataList */) &&
           verifier.Verify(slotDataList()) &&
           verifier.VerifyVectorOfTables(slotDataList()) &&
           verifier.EndTable();
  }
};

struct SkinDataOptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_slotDataList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SlotDataOption>>> slotDataList) { fbb_.AddOffset(6, slotDataList); }
  SkinDataOptionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SkinDataOptionBuilder &operator=(const SkinDataOptionBuilder &);
  flatbuffers::Offset<SkinDataOption> Finish() {
    auto o = flatbuffers::Offset<SkinDataOption>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SkinDataOption> CreateSkinDataOption(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SlotDataOption>>> slotDataList = 0) {
  SkinDataOptionBuilder builder_(_fbb);
  builder_.add_slotDataList(slotDataList);
  builder_.add_name(name);
  return builder_.Finish();
}

struct AnimationDataOption : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  int8_t frameRate() const { return GetField<int8_t>(6, 0); }
  float fadeTime() const { return GetField<float>(8, 0); }
  int32_t playTimes() const { return GetField<int32_t>(10, 0); }
  float tweenEasing() const { return GetField<float>(12, 0); }
  uint8_t autoTween() const { return GetField<uint8_t>(14, 0); }
  int32_t lastFrameDuration() const { return GetField<int32_t>(16, 0); }
  const TimelineOption *timeline() const { return GetPointer<const TimelineOption *>(18); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *hideTimelineList() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(20); }
  const flatbuffers::Vector<flatbuffers::Offset<TransformTimelineOption>> *timelineList() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TransformTimelineOption>> *>(22); }
  const flatbuffers::Vector<flatbuffers::Offset<SlotTimelineOption>> *slotTimelineList() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SlotTimelineOption>> *>(24); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<int8_t>(verifier, 6 /* frameRate */) &&
           VerifyField<float>(verifier, 8 /* fadeTime */) &&
           VerifyField<int32_t>(verifier, 10 /* playTimes */) &&
           VerifyField<float>(verifier, 12 /* tweenEasing */) &&
           VerifyField<uint8_t>(verifier, 14 /* autoTween */) &&
           VerifyField<int32_t>(verifier, 16 /* lastFrameDuration */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 18 /* timeline */) &&
           verifier.VerifyTable(timeline()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 20 /* hideTimelineList */) &&
           verifier.Verify(hideTimelineList()) &&
           verifier.VerifyVectorOfStrings(hideTimelineList()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 22 /* timelineList */) &&
           verifier.Verify(timelineList()) &&
           verifier.VerifyVectorOfTables(timelineList()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 24 /* slotTimelineList */) &&
           verifier.Verify(slotTimelineList()) &&
           verifier.VerifyVectorOfTables(slotTimelineList()) &&
           verifier.EndTable();
  }
};

struct AnimationDataOptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_frameRate(int8_t frameRate) { fbb_.AddElement<int8_t>(6, frameRate, 0); }
  void add_fadeTime(float fadeTime) { fbb_.AddElement<float>(8, fadeTime, 0); }
  void add_playTimes(int32_t playTimes) { fbb_.AddElement<int32_t>(10, playTimes, 0); }
  void add_tweenEasing(float tweenEasing) { fbb_.AddElement<float>(12, tweenEasing, 0); }
  void add_autoTween(uint8_t autoTween) { fbb_.AddElement<uint8_t>(14, autoTween, 0); }
  void add_lastFrameDuration(int32_t lastFrameDuration) { fbb_.AddElement<int32_t>(16, lastFrameDuration, 0); }
  void add_timeline(flatbuffers::Offset<TimelineOption> timeline) { fbb_.AddOffset(18, timeline); }
  void add_hideTimelineList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> hideTimelineList) { fbb_.AddOffset(20, hideTimelineList); }
  void add_timelineList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TransformTimelineOption>>> timelineList) { fbb_.AddOffset(22, timelineList); }
  void add_slotTimelineList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SlotTimelineOption>>> slotTimelineList) { fbb_.AddOffset(24, slotTimelineList); }
  AnimationDataOptionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AnimationDataOptionBuilder &operator=(const AnimationDataOptionBuilder &);
  flatbuffers::Offset<AnimationDataOption> Finish() {
    auto o = flatbuffers::Offset<AnimationDataOption>(fbb_.EndTable(start_, 11));
    return o;
  }
};

inline flatbuffers::Offset<AnimationDataOption> CreateAnimationDataOption(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   int8_t frameRate = 0,
   float fadeTime = 0,
   int32_t playTimes = 0,
   float tweenEasing = 0,
   uint8_t autoTween = 0,
   int32_t lastFrameDuration = 0,
   flatbuffers::Offset<TimelineOption> timeline = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> hideTimelineList = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TransformTimelineOption>>> timelineList = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SlotTimelineOption>>> slotTimelineList = 0) {
  AnimationDataOptionBuilder builder_(_fbb);
  builder_.add_slotTimelineList(slotTimelineList);
  builder_.add_timelineList(timelineList);
  builder_.add_hideTimelineList(hideTimelineList);
  builder_.add_timeline(timeline);
  builder_.add_lastFrameDuration(lastFrameDuration);
  builder_.add_tweenEasing(tweenEasing);
  builder_.add_playTimes(playTimes);
  builder_.add_fadeTime(fadeTime);
  builder_.add_name(name);
  builder_.add_autoTween(autoTween);
  builder_.add_frameRate(frameRate);
  return builder_.Finish();
}

struct ArmatureOption : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<BoneDataOption>> *boneDataList() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BoneDataOption>> *>(6); }
  const flatbuffers::Vector<flatbuffers::Offset<SkinDataOption>> *skinDataList() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SkinDataOption>> *>(8); }
  const flatbuffers::Vector<flatbuffers::Offset<SlotDataOption>> *slotDataList() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SlotDataOption>> *>(10); }
  const flatbuffers::Vector<flatbuffers::Offset<AnimationDataOption>> *animationDataList() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<AnimationDataOption>> *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* boneDataList */) &&
           verifier.Verify(boneDataList()) &&
           verifier.VerifyVectorOfTables(boneDataList()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* skinDataList */) &&
           verifier.Verify(skinDataList()) &&
           verifier.VerifyVectorOfTables(skinDataList()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* slotDataList */) &&
           verifier.Verify(slotDataList()) &&
           verifier.VerifyVectorOfTables(slotDataList()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* animationDataList */) &&
           verifier.Verify(animationDataList()) &&
           verifier.VerifyVectorOfTables(animationDataList()) &&
           verifier.EndTable();
  }
};

struct ArmatureOptionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_boneDataList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BoneDataOption>>> boneDataList) { fbb_.AddOffset(6, boneDataList); }
  void add_skinDataList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SkinDataOption>>> skinDataList) { fbb_.AddOffset(8, skinDataList); }
  void add_slotDataList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SlotDataOption>>> slotDataList) { fbb_.AddOffset(10, slotDataList); }
  void add_animationDataList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AnimationDataOption>>> animationDataList) { fbb_.AddOffset(12, animationDataList); }
  ArmatureOptionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ArmatureOptionBuilder &operator=(const ArmatureOptionBuilder &);
  flatbuffers::Offset<ArmatureOption> Finish() {
    auto o = flatbuffers::Offset<ArmatureOption>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<ArmatureOption> CreateArmatureOption(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BoneDataOption>>> boneDataList = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SkinDataOption>>> skinDataList = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SlotDataOption>>> slotDataList = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AnimationDataOption>>> animationDataList = 0) {
  ArmatureOptionBuilder builder_(_fbb);
  builder_.add_animationDataList(animationDataList);
  builder_.add_slotDataList(slotDataList);
  builder_.add_skinDataList(skinDataList);
  builder_.add_boneDataList(boneDataList);
  builder_.add_name(name);
  return builder_.Finish();
}

struct DragonBonesParseBinary : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  uint8_t autoSearch() const { return GetField<uint8_t>(6, 0); }
  uint8_t isGlobalData() const { return GetField<uint8_t>(8, 0); }
  const flatbuffers::String *version() const { return GetPointer<const flatbuffers::String *>(10); }
  const flatbuffers::Vector<flatbuffers::Offset<ArmatureOption>> *armatures() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ArmatureOption>> *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<uint8_t>(verifier, 6 /* autoSearch */) &&
           VerifyField<uint8_t>(verifier, 8 /* isGlobalData */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* version */) &&
           verifier.Verify(version()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* armatures */) &&
           verifier.Verify(armatures()) &&
           verifier.VerifyVectorOfTables(armatures()) &&
           verifier.EndTable();
  }
};

struct DragonBonesParseBinaryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_autoSearch(uint8_t autoSearch) { fbb_.AddElement<uint8_t>(6, autoSearch, 0); }
  void add_isGlobalData(uint8_t isGlobalData) { fbb_.AddElement<uint8_t>(8, isGlobalData, 0); }
  void add_version(flatbuffers::Offset<flatbuffers::String> version) { fbb_.AddOffset(10, version); }
  void add_armatures(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ArmatureOption>>> armatures) { fbb_.AddOffset(12, armatures); }
  DragonBonesParseBinaryBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  DragonBonesParseBinaryBuilder &operator=(const DragonBonesParseBinaryBuilder &);
  flatbuffers::Offset<DragonBonesParseBinary> Finish() {
    auto o = flatbuffers::Offset<DragonBonesParseBinary>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<DragonBonesParseBinary> CreateDragonBonesParseBinary(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   uint8_t autoSearch = 0,
   uint8_t isGlobalData = 0,
   flatbuffers::Offset<flatbuffers::String> version = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ArmatureOption>>> armatures = 0) {
  DragonBonesParseBinaryBuilder builder_(_fbb);
  builder_.add_armatures(armatures);
  builder_.add_version(version);
  builder_.add_name(name);
  builder_.add_isGlobalData(isGlobalData);
  builder_.add_autoSearch(autoSearch);
  return builder_.Finish();
}

inline const DragonBonesParseBinary *GetDragonBonesParseBinary(const void *buf) { return flatbuffers::GetRoot<DragonBonesParseBinary>(buf); }

inline bool VerifyDragonBonesParseBinaryBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<DragonBonesParseBinary>(); }

inline void FinishDragonBonesParseBinaryBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<DragonBonesParseBinary> root) { fbb.Finish(root); }

}  // namespace dragonBones

#endif  // FLATBUFFERS_GENERATED_DRAGONBONES_DRAGONBONES_H_
