// example IDL file

namespace dragonBones;

struct PointOption {
  x: float;
  y: float;
}

struct TransformOption {
  x:float;
  y:float;
  skewX:float;
  skewY:float;
  scaleX:float;
  scaleY:float;
}

table Vec2Option {
  x:float;
  y:float;
}

table IKDataOption {
  name: string;
  target: string;
  bone: string;
  chain: float;
  weight: float;
  bendPositive: bool;
}

table CurveDataOption {
  pointList: [Vec2Option];
}

table FrameOption {
  position: int;
  duration: int;
    
  frameType: ubyte;
  action: string;
  event: string;
  sound: string;
  curve: CurveDataOption;
}

table TransformFrameOption {
  visible: bool;
  tweenScale: bool;
  tweenRotate: int;
  tweenEasing: float;
    
  global: TransformOption;
  transform: TransformOption;
  pivot: PointOption;
  scaleOffset: PointOption;
  frame: FrameOption;
}

table ColorTransformOption {
  alphaMultiplier: float;
  redMultiplier: float;
  greenMultiplier: float;
  blueMultiplier: float;
    
  alphaOffset: int;
  redOffset: int;
  greenOffset: int;
  blueOffset: int;
}

table SlotFrameOption {
  visible: bool;
  zOrder: float;
  displayIndex: int;
  tweenEasing: float;
  color: ColorTransformOption;
  frame: FrameOption;
}

table FFDFrameOption {
  tweenEasing: float;
  offset: float;
  vertices: [float];
  frame: FrameOption;
}

table TimelineOption {
  duration: int;
  scale: float;
  transformFrameList: [TransformFrameOption];
  slotFrameList: [SlotFrameOption];
  ffdFrameList: [FFDFrameOption];
  frameList: [FrameOption];
}

table TransformTimelineOption {
  transformed: bool;
  offset: float;
  name: string;
  originTransform: TransformOption;
  originPivot: PointOption;
  timeline : TimelineOption;
}

table DisplayDataOption {
  name: string;
  slotName: string;
  type: ubyte;
  transform:TransformOption;
  pivot: PointOption;
}

table MeshDataOption {
  width: float;
  height: float;
  triangles: [int];
  vectices: [Vec2Option];
  uvs: [Vec2Option];
  displayData: DisplayDataOption;

}

table SlotTimelineOption {
  name: string;
  transformed: bool;
  offset: float;
  timeline : TimelineOption;
}

table FFDTimelineOption {
  name: string;
  skinName: string;
  slotName: string;
  offset: float;
  timeline : TimelineOption;
}

table BoneDataOption{
  name: string;
  parent: string;
  length: int;

  inheritScale: bool;
  inheritRotation: bool;
  global: TransformOption;
  transform: TransformOption;
}

table SlotDataOption {
  displayIndex: int;
  zOrder: int;
  name: string;
  parent: string;
  blendMode: ubyte;
  displayDataList: [DisplayDataOption];
  meshDataList: [MeshDataOption];
}

table SkinDataOption {
  name: string;
  slotDataList: [SlotDataOption];
}

table AnimationDataOption {
  name: string;
  frameRate: byte;
  fadeTime: float;
  playTimes: int;
  tweenEasing: float;
  autoTween: bool;
  lastFrameDuration: int;
  timeline: TimelineOption;
  hideTimelineList: [string];
  timelineList: [TransformTimelineOption];
  slotTimelineList: [SlotTimelineOption];
  ffdTimelineList: [FFDTimelineOption];
}

table ArmatureOption{
  name: string;
  boneDataList: [BoneDataOption];
  skinDataList: [SkinDataOption];
  slotDataList: [SlotDataOption];
  ikDataList: [IKDataOption];
  animationDataList: [AnimationDataOption];
}

table DragonBonesParseBinary {
  name: string;
  autoSearch: bool;
  isGlobalData: bool;
  version: string;
  armatures: [ArmatureOption];
}

root_type DragonBonesParseBinary;
